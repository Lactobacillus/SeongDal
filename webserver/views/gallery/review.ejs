<!DOCTYPE html>
<html>
  <head>
    <% include ../partials/head %>
    <script type="text/javascript" src="http://svcapi.gigagenie.ai/sdk/v1.0/js/gigagenie.js"></script>
    <script type="text/javascript">
    var options={};
    // 서비스 초기화
    function init(){
      options={};
    	options.keytype="GBOXDEVM"; // 개발(GBOXDEVM) 또는 상용(GBOXCOMM) 키 종류 입력
    	options.apikey="RTUwMDE4OTN8R0JPWERFVk18MTUyODY5MTc4MzQ4Ng=="; // 개발자 포털에서 키를 발급받아 입력

      gigagenie.init(options,function(result_cd,result_msg,extra){
            if(result_cd===200){
                //init 성공
                var script = <%- JSON.stringify(script) %>
                //함수 호출 및 개발 진행
                var vid = document.getElementById("mimicVideo");
                var aud = document.getElementById("mimicAudio");
                vid.muted = false;

                aud.autoplay = false;
                aud.pause();
                setTimeout(function(){ aud.load(); aud.play(); vid.muted = true;}, 6000);

                vid.onended = function() {
                  window.location.href = '/gallery';
                };
    	    };
    	});
    }

    // 서비스 종료 명령 수신 API
    gigagenie.voice.onRequestClose=function(){
    	options={};
    	gigagenie.voice.svcFinished(options,function(result_cd,result_msg,extra){
    	});
    };

    gigagenie.voice.onVoiceCommand=function(event){
      switch(event){
          case 'nextPage':
              //navigate next page
              break;
          case 'prevPage':
              //navigate prev page
              window.history.back();
              break;
          default:
              break;
      }
    };
    </script>
  </head>
  <style>
    html, body, video {
    	padding: 0;
    	margin: 0;
    }
    video {
    	position: absolute;
    	top: 0;
    	left: 0;
    	bottom: 0;
    	right: 0;
    	width: 100%;
    	height: 100%;
      background: black;
    }
  </style>
  <body onload=init()>
    <header>
      <% include ../partials/header %>
    </header>
    <video id="mimicVideo" controls autoplay style="padding:0;margin:0;">
      <source src="/videos/<%=script.movieSelected%>">
    </video>
    <script type="text/vtt" id="subtitle" data-label="Korean" data-lang="ko">
      <%= script.subtitle %>
    </script>
    <audio id="mimicAudio" controls autoplay style="display:none;">
     <source src="/voices/mimic/<%=filename%>" type="audio/mpeg">
   </audio>
<script>
function parse_timestamp(s) {
	//var match = s.match(/^(?:([0-9]{2,}):)?([0-5][0-9]):([0-5][0-9][.,][0-9]{0,3})/);
	// Relaxing the timestamp format:
	var match = s.match(/^(?:([0-9]+):)?([0-5][0-9]):([0-5][0-9](?:[.,][0-9]{0,3})?)/);
	if (match == null) {
		throw 'Invalid timestamp format: ' + s;
	}
	var hours = parseInt(match[1] || "0", 10);
	var minutes = parseInt(match[2], 10);
	var seconds = parseFloat(match[3].replace(',', '.'));
	return seconds + 60 * minutes + 60 * 60 * hours;
}

// https://w3c.github.io/webvtt/
// https://developer.mozilla.org/en/docs/Web/API/Web_Video_Text_Tracks_Format
// https://en.wikipedia.org/wiki/WebVTT
//
// For better parsers, look at:
// https://github.com/annevk/webvtt
// https://github.com/mozilla/vtt.js
function quick_and_dirty_vtt_or_srt_parser(vtt) {
	var lines = vtt.trim().replace('\r\n', '\n').split(/[\r\n]/).map(function(line) {
		return line.trim();
	});
	var cues = [];
	var start = null;
	var end = null;
	var payload = null;
	for (var i = 0; i < lines.length; i++) {
		if (lines[i].indexOf('--&gt;') >= 0) {
			var splitted = lines[i].split(/[ \t]+--&gt;[ \t]+/);
			if (splitted.length != 2) {
				throw 'Error when splitting "-->": ' + lines[i];
			}

			// Already ignoring anything past the "end" timestamp (i.e. cue settings).
			start = parse_timestamp(splitted[0]);
			end = parse_timestamp(splitted[1]);
		} else if (lines[i] == '') {
			if (start && end) {
				var cue = new VTTCue(start, end, payload);
				cues.push(cue);
				start = null;
				end = null;
				payload = null;
			}
		} else if(start && end) {
			if (payload == null) {
				payload = lines[i];
			} else {
				payload += '\n' + lines[i];
			}
		}
	}
	if (start && end) {
		var cue = new VTTCue(start, end, payload);
		cues.push(cue);
	}

	return cues;
}

function init_video() {
	// http://www.html5rocks.com/en/tutorials/track/basics/
	// https://www.iandevlin.com/blog/2015/02/javascript/dynamically-adding-text-tracks-to-html5-video
	var video = document.querySelector('video');
	var subtitle = document.getElementById('subtitle');
	var track = video.addTextTrack('subtitles', subtitle.dataset.label, subtitle.dataset.lang);
	track.mode = "showing";
	quick_and_dirty_vtt_or_srt_parser(subtitle.innerHTML).map(function(cue) {
		track.addCue(cue);
	});
}
init_video();
</script>
 </body>
</html>
